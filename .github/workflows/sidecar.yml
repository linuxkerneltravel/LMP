name: Sidecar

on:
  push:
    branches:
      - "*"
    paths: 
      - 'eBPF_Supermarket/sidecar/**'
  pull_request:
    branches:
      - "*"
    paths: 
      - 'eBPF_Supermarket/sidecar/**'

jobs:
  sidecar-build-and-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      
      - name: Build BCC
        run: |
          # For Jammy (22.04)
          sudo apt install -y bison build-essential cmake flex git libedit-dev \
          libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-distutils
          git clone --depth 1 --branch v0.24.0 https://github.com/iovisor/bcc.git
          mkdir bcc/build; cd bcc/build
          cmake ..
          make
          sudo make install
          cmake -DPYTHON_CMD=python3 .. # build python3 binding
          pushd src/python/
          make
          sudo make install
          popd

      - name: Build
        run: |
          cd eBPF_Supermarket/sidecar/
          go build -v ./...
      - name: Test
        run: |
          cd eBPF_Supermarket/sidecar/
          go test `go list ./... | grep -v github.com/eswzy/podstat/tools ï½œ grep -v github.com/eswzy/podstat/bpf`

  sidecar-integration-test-with-minikube-and-istio:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@master

      - name: Set Up istio
        run : |
          # https://istio.io/latest/docs/setup/getting-started/
          curl -L https://istio.io/downloadIstio | sh -
          cd istio-*
          export PATH=$PWD/bin:$PATH
          istioctl install --set profile=demo -y
          kubectl label namespace default istio-injection=enabled
          kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
      
      - name: Build BCC
        run: |
          # For Jammy (22.04)
          sudo apt install -y bison build-essential cmake flex git libedit-dev \
          libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-distutils
          git clone --depth 1 --branch v0.24.0 https://github.com/iovisor/bcc.git
          mkdir bcc/build; cd bcc/build
          cmake ..
          make
          sudo make install
          cmake -DPYTHON_CMD=python3 .. # build python3 binding
          pushd src/python/
          make
          sudo make install
          popd

      - name: Wait for istio
        run: |
          kubectl get nodes
          kubectl get pods -owide -A
          kubectl get services
          test_pod() {
            while [[ $(kubectl get pods -l $1 -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]
              do 
                echo "waiting for pod"
                sleep 5
                kubectl get pods -owide -A; 
              done
            return 0
          }
          test_pod app=ratings
          echo "ratings is done"
          test_pod app=productpage
          echo "productpage is done"
          kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

      - name: Run
        run: |
          docker ps -a
          export MINIKUBE_ROOT_PID=$(docker inspect $(docker ps | grep minikube | awk -F ' ' '{print $1}') -f '{{.State.Pid}}')
          export MINIKUBE_STARTED=TRUE
          eval $(minikube -p minikube docker-env)
          env
          docker ps -a
          ps axjf
          cd eBPF_Supermarket/sidecar/
          sudo -E timeout 300 go run main.go || if [[ $? != 124 && $? != 0 ]]; then exit $?; fi

