// Code generated by bpf2go; DO NOT EDIT.

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpf_connectLb4Backend struct {
	Address uint32
	Port    uint16
	Proto   uint8
	Flags   uint8
}

type bpf_connectLb4Key struct {
	Address     uint32
	Dport       uint16
	BackendSlot uint16
	Proto       uint8
	Scope       uint8
	Pad         [2]uint8
}

type bpf_connectLb4Service struct {
	BackendId uint32
	Count     uint16
	Pad       [2]uint8
}

// loadBpf_connect returns the embedded CollectionSpec for bpf_connect.
func loadBpf_connect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Bpf_connectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf_connect: %w", err)
	}

	return spec, err
}

// loadBpf_connectObjects loads bpf_connect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpf_connectObjects
//	*bpf_connectPrograms
//	*bpf_connectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpf_connectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf_connect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpf_connectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_connectSpecs struct {
	bpf_connectProgramSpecs
	bpf_connectMapSpecs
}

// bpf_connectSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_connectProgramSpecs struct {
	Sock4Connect *ebpf.ProgramSpec `ebpf:"sock4_connect"`
}

// bpf_connectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpf_connectMapSpecs struct {
	LB4BACKEND_MAP_V2  *ebpf.MapSpec `ebpf:"LB4_BACKEND_MAP_V2"`
	LB4SERVICES_MAP_V2 *ebpf.MapSpec `ebpf:"LB4_SERVICES_MAP_V2"`
}

// bpf_connectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpf_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_connectObjects struct {
	bpf_connectPrograms
	bpf_connectMaps
}

func (o *bpf_connectObjects) Close() error {
	return _Bpf_connectClose(
		&o.bpf_connectPrograms,
		&o.bpf_connectMaps,
	)
}

// bpf_connectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpf_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_connectMaps struct {
	LB4BACKEND_MAP_V2  *ebpf.Map `ebpf:"LB4_BACKEND_MAP_V2"`
	LB4SERVICES_MAP_V2 *ebpf.Map `ebpf:"LB4_SERVICES_MAP_V2"`
}

func (m *bpf_connectMaps) Close() error {
	return _Bpf_connectClose(
		m.LB4BACKEND_MAP_V2,
		m.LB4SERVICES_MAP_V2,
	)
}

// bpf_connectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpf_connectObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpf_connectPrograms struct {
	Sock4Connect *ebpf.Program `ebpf:"sock4_connect"`
}

func (p *bpf_connectPrograms) Close() error {
	return _Bpf_connectClose(
		p.Sock4Connect,
	)
}

func _Bpf_connectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_connect_bpf.o
var _Bpf_connectBytes []byte
